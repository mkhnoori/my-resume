name: Deploy Django App to EC2 and Set up Domain

on:
  push:
    branches:
      - main  # Deploy only on changes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Install SSH client
      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      # Set up SSH key for EC2 access
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      # Add EC2 host to known hosts to avoid the "host verification" prompt
      - name: Add EC2 to known hosts
        run: |
          echo "Adding EC2 IP to known_hosts"
          ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts

      # Deploy the app to EC2
      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} << 'EOF'
            # Pull latest code
            cd /home/ubuntu/my-resume && git pull origin main

            # Set up Nginx configuration
            sudo bash -c 'cat > /etc/nginx/sites-available/resume.mkhnoori.dev << "EOF_NGINX"
            server {
                listen 80;
                server_name resume.mkhnoori.dev;

                location / {
                    proxy_pass http://unix:/home/ubuntu/my-resume/myresume.sock;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }

                location /static/ {
                    alias /home/ubuntu/my-resume/staticfiles/;
                }
            }
            EOF_NGINX'

            # Remove existing symlink if it exists, then create a new one
            sudo rm -f /etc/nginx/sites-enabled/resume.mkhnoori.dev
            sudo ln -s /etc/nginx/sites-available/resume.mkhnoori.dev /etc/nginx/sites-enabled/

            # Test and reload Nginx configuration
            sudo nginx -t  # Test the Nginx configuration
            sudo systemctl reload nginx  # Reload Nginx to apply the changes

            # Set up Gunicorn to run as a systemd service
            sudo bash -c 'cat > /etc/systemd/system/gunicorn.service << "EOF_GUNICORN"
            [Unit]
            Description=gunicorn daemon for Django project
            After=network.target

            [Service]
            User=ubuntu
            Group=ubuntu
            WorkingDirectory=/home/ubuntu/my-resume
            ExecStart=/home/ubuntu/my-resume/venv/bin/gunicorn --workers 3 --bind unix:/home/ubuntu/my-resume/myresume.sock resume.wsgi:application

            # Restart the service if it crashes
            Restart=always

            [Install]
            WantedBy=multi-user.target
            EOF_GUNICORN'

            # Reload systemd and enable Gunicorn to start on boot
            sudo systemctl daemon-reload
            sudo systemctl enable gunicorn
            sudo systemctl start gunicorn
          EOF
