name: Deploy Django App to EC2

on:
  push:
    branches:
      - main  # Deploy only on changes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Install SSH client
      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      # Set up SSH key for EC2 access
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      # Add EC2 host to known hosts to avoid the "host verification" prompt
      - name: Add EC2 to known hosts
        run: |
          echo "Adding EC2 IP to known_hosts"
          ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts

      # Deploy the app to EC2
      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} << EOF
            # Check if the directory exists, if not, clone the repo
            if [ ! -d "/home/ubuntu/my-resume" ]; then
              git clone https://github.com/${{ github.repository }} /home/ubuntu/my-resume
            fi

            # Go to the project directory
            cd /home/ubuntu/my-resume

            # Pull the latest changes from the main branch
            git fetch --all
            git reset --hard origin/main

            # Set up the virtual environment (assuming it doesn't exist)
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            source venv/bin/activate

            # Install requirements
            pip install -r requirements.txt

            # Apply database migrations
            python manage.py migrate

            # Collect static files
            python manage.py collectstatic --noinput

            # Restart Gunicorn and Nginx
            sudo systemctl restart gunicorn
            sudo systemctl restart nginx
          EOF
