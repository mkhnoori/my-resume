name: Deploy Django App to EC2 and Set up Domain

on:
  push:
    branches:
      - main  # Deploy only on changes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Install SSH client
      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      # Set up SSH key for EC2 access
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      # Add EC2 host to known hosts to avoid the "host verification" prompt
      - name: Add EC2 to known hosts
        run: |
          echo "Adding EC2 IP to known_hosts"
          ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts

      # Update DNS Record in Route 53 (Assuming you're using AWS CLI)
      - name: Update Route 53 DNS Record
        run: |
          aws route53 change-resource-record-sets \
            --hosted-zone-id ${{ secrets.ROUTE53_HOSTED_ZONE_ID }} \
            --change-batch '{
              "Changes": [
                {
                  "Action": "UPSERT",
                  "ResourceRecordSet": {
                    "Name": "mkhnoori.net.",
                    "Type": "A",
                    "TTL": 300,
                    "ResourceRecords": [
                      {
                        "Value": "${{ secrets.EC2_IP }}"
                      }
                    ]
                  }
                }
              ]
            }'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"

      # Deploy the app to EC2
      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} << EOF
            # Pull latest code
            cd /home/ubuntu/my-resume && git pull origin main
            
            # Set up Nginx
            sudo bash -c 'cat > /etc/nginx/sites-available/mkhnoori.net <<EOF_NGINX
            server {
                listen 80;
                server_name mkhnoori.net www.mkhnoori.net;
                
                location / {
                    proxy_pass http://127.0.0.1:8000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }

                location /static/ {
                    alias /home/ubuntu/my-resume/static/;
                }

                location /media/ {
                    alias /home/ubuntu/my-resume/media/;
                }
            }
            EOF_NGINX'

            sudo ln -s /etc/nginx/sites-available/mkhnoori.net /etc/nginx/sites-enabled/
            sudo nginx -t
            sudo systemctl reload nginx
            
            # Install Gunicorn if not already installed
            source /home/ubuntu/my-resume/venv/bin/activate
            pip install gunicorn

            # Restart services
            sudo systemctl restart gunicorn
            sudo systemctl restart nginx
          EOF

      # Set up SSL with Let's Encrypt (using Certbot)
      - name: Setup SSL with Certbot
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} << EOF
            sudo apt-get update
            sudo apt-get install -y certbot python3-certbot-nginx

            # Obtain SSL certificate for the domain
            sudo certbot --nginx -d mkhnoori.net -d www.mkhnoori.net

            # Set up automatic certificate renewal
            sudo systemctl enable certbot.timer
            sudo systemctl start certbot.timer
          EOF
