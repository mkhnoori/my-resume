---
- name: Deploy Django app to Ubuntu
  hosts: webservers
  become: yes
  vars:
    db_name: "mydb"
    db_user: "admin"
    db_password: "khalid"  # Make sure to use a strong password here
    secret_key: 'django-insecure-8lp&evub*!1bcjbfw=@tg#7%wt8kv9z)tx0w4ftkv$5u=zm+d9'  # Replace with your actual secret key
    app_dir: "/home/ubuntu/myapp"  # The directory where your project will be cloned
    virtualenv_path: "/home/ubuntu/.virtualenvs/django_app"

  tasks:
    # 1. Update apt and install dependencies
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install system dependencies
      apt:
        name:
          - python3
          - python3-pip
          - python3-dev
          - python3-venv
          - build-essential
          - libmysqlclient-dev  # MySQL client development headers (for Django)
          - mysql-server  # Install MySQL server
          - git
          - nginx
          - supervisor
        state: present

    # 2. Create a Python virtual environment
    - name: Create Python virtual environment
      command: python3 -m venv "{{ virtualenv_path }}"
      args:
        creates: "{{ virtualenv_path }}/bin/activate"

    # 3. Clone Django app repository
    - name: Clone Django app repository
      git:
        repo: 'https://github.com/mkhnoori/python-khalid-resume.git'
        dest: "{{ app_dir }}"
        version: "main"  # Replace with your branch name or tag if needed

    # 4. Install Python dependencies from requirements.txt
    - name: Install Python dependencies
      pip:
        requirements: "{{ app_dir }}/requirements.txt"
        virtualenv: "{{ virtualenv_path }}"
        virtualenv_command: python3 -m venv

    # Install MySQL client for Python in the virtual environment
    - name: Install mysqlclient in virtual environment
      pip:
        name: mysqlclient  # MySQL client for Python
        virtualenv: "{{ virtualenv_path }}"
        virtualenv_command: python3 -m venv

    # 5. Set up MySQL database and user
    - name: Ensure MySQL is installed
      apt:
        name: mysql-server
        state: present

    - name: Start MySQL service
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Create MySQL database
      mysql_db:
        name: "{{ db_name }}"
        state: present

    - name: Create MySQL user
      mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        priv: "{{ db_name }}.*:ALL"
        state: present

    # 6. Set environment variables and systemd service for Gunicorn
    - name: Create a Gunicorn systemd service file
      copy:
        dest: "/etc/nginx/sites-available/{{ app_dir | basename }}"
        content: |
          [Unit]
          Description=Gunicorn instance to serve Django app
          After=network.target

          [Service]
          User=ubuntu
          Group=ubuntu
          WorkingDirectory={{ app_dir }}
          ExecStart={{ virtualenv_path }}/bin/gunicorn --workers 3 --bind 0.0.0.0:8000 resume.wsgi:application

          [Install]
          WantedBy=multi-user.target
      notify:
        - Restart Gunicorn

    # 7. Set up Nginx configuration
    - name: Create Nginx config for Django app
      template:
        src: nginx_django_template.conf.j2
        dest: "/etc/nginx/sites-available/{{ app_dir }}"
      notify:
        - Restart Nginx

    # 8. Enable Gunicorn and Nginx to start on boot
    - name: Enable Gunicorn and Nginx to start on boot
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - "{{ app_dir }}.service"
        - nginx

  handlers:
    - name: Restart Gunicorn
      systemd:
        name: "{{ app_dir }}.service"
        state: restarted

    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted
